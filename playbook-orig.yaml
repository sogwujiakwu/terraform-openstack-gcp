---
- name: Check if CPU supports virtualization (vmx or svm)
  hosts: all
  tasks:
    - name: Run the command to check CPU flags
      shell: "egrep 'vmx|svm' /proc/cpuinfo | wc -l"
      register: cpu_flags_result

    - name: Display the output
      debug:
        msg: "Number of CPU flags (vmx or svm) found: {{ cpu_flags_result.stdout }}"

    - name: Check if the CPU supports virtualization
      assert:
        that:
          - cpu_flags_result.stdout | int > 0
        fail_msg: "No CPU virtualization support (vmx or svm) found!"
        success_msg: "CPU supports virtualization (vmx or svm)."

- name: Manage SELinux settings
  hosts: all
  become: yes  # Ensures that commands are run with elevated privileges (sudo)
  tasks:

    - name: Set SELinux to permissive mode (setenforce 0)
      command: setenforce 0
      ignore_errors: true  # Optional: Ignores errors in case SELinux is already in permissive or disabled mode

    - name: Disable SELinux permanently in /etc/selinux/config
      replace:
        path: /etc/selinux/config
        regexp: '^SELINUX=enforcing'
        replace: 'SELINUX=disabled'

    - name: Verify SELinux configuration in /etc/selinux/config
      shell: cat /etc/selinux/config | grep SELINUX=
      register: selinux_config_output

    - name: Display SELinux configuration
      debug:
        msg: "SELinux configuration: {{ selinux_config_output.stdout }}"

- name: OpenStack and Network Configuration Setup
  hosts: all
  become: yes  # Ensures commands are run with elevated privileges
  tasks:

    # Enable CRB (CodeReady Builder) repository
    - name: Enable crb repository
      command: dnf config-manager --enable crb

    # Install OpenStack Yoga release
    - name: Install CentOS OpenStack Yoga release
      dnf:
        name: centos-release-openstack-yoga
        state: present

    # Update all packages
    - name: Update all packages
      dnf:
        name: "*"
        state: latest

    # Install network scripts package
    - name: Install network-scripts package
      dnf:
        name: network-scripts
        state: present

    # Disable and stop firewalld
    - name: Disable and stop firewalld
      systemd:
        name: firewalld
        enabled: no
        state: stopped

    # Disable and stop NetworkManager
    - name: Disable and stop NetworkManager
      systemd:
        name: NetworkManager
        enabled: no
        state: stopped

    # Enable and start network service
    - name: Enable and start network service
      systemd:
        name: network
        enabled: yes
        state: started

    # Install OpenStack Packstack
    - name: Install OpenStack Packstack
      dnf:
        name: openstack-packstack
        state: present

    # Install tmux
    - name: Install tmux
      dnf:
        name: tmux
        state: present

    # Update /etc/resolv.conf for DNS settings
    - name: Set DNS nameservers in /etc/resolv.conf
      lineinfile:
        path: /etc/resolv.conf
        line: "{{ item }}"
        state: present
      loop:
        - "nameserver 8.8.8.8"
        - "nameserver 8.8.4.4"

    # Remove lines between # Add Zeroconf route and # IPv6 initialization
    - name: Remove lines between markers
      replace:
        path: /etc/sysconfig/network-scripts/ifup-eth
        regexp: '(^# Add Zeroconf route.*?\n)(.*?)(# IPv6 initialization\?)'
        replace: '\1\n\3'
        backup: yes    
    
    # Restart network service
    - name: Restart network service
      systemd:
        name: network
        state: restarted

    # Check status of network service
    - name: Check network service status
      command: systemctl status network
      register: network_status

    # Display network service status
    - name: Display network status
      debug:
        var: network_status.stdout

- name: OpenStack Packstack Configuration
  hosts: controller
  become: yes  # Run with elevated privileges

  vars_prompt:
    - name: "admin_password"
      prompt: "Enter the Keystone Admin Password"
      private: yes  # Hides the password input

  tasks:

    # Generate the answer file for Packstack
    - name: Generate Packstack answer file
      command: packstack --gen-answer-file=/root/answer.txt
      args:
        creates: /root/answer.txt  # This prevents running the task if the file already exists

    # Skip provisioning of the Demo project
    - name: Set CONFIG_PROVISION_DEMO to 'n' in /root/answer.txt
      lineinfile:
        path: /root/answer.txt
        regexp: '^CONFIG_PROVISION_DEMO=.*'
        line: 'CONFIG_PROVISION_DEMO=n'

    # Set Keystone Admin password
    - name: Set Keystone Admin password in /root/answer.txt
      lineinfile:
        path: /root/answer.txt
        regexp: '^CONFIG_KEYSTONE_ADMIN_PW=.*'
        line: "CONFIG_KEYSTONE_ADMIN_PW={{ admin_password }}"

    # Enable OpenStack Orchestration (Heat)
    - name: Enable OpenStack Orchestration (Heat) in /root/answer.txt
      lineinfile:
        path: /root/answer.txt
        regexp: '^CONFIG_HEAT_INSTALL=.*'
        line: 'CONFIG_HEAT_INSTALL=y'

    # Set Compute Hosts
    - name: Set Compute hosts in /root/answer.txt
      lineinfile:
        path: /root/answer.txt
        regexp: '^CONFIG_COMPUTE_HOSTS=.*'
        line: 'CONFIG_COMPUTE_HOSTS=10.142.0.10,10.142.0.8'

    # Set Network Hosts
    - name: Set Network hosts in /root/answer.txt
      lineinfile:
        path: /root/answer.txt
        regexp: '^CONFIG_NETWORK_HOSTS=.*'
        line: 'CONFIG_NETWORK_HOSTS=10.142.0.10,10.142.0.8'

    # Configure Neutron OVN bridge mappings
    - name: Set Neutron OVN bridge interfaces in /root/answer.txt
      lineinfile:
        path: /root/answer.txt
        regexp: '^CONFIG_NEUTRON_OVN_BRIDGE_IFACES=.*'
        line: 'CONFIG_NEUTRON_OVN_BRIDGE_IFACES=br-ex:eth0'

    # Display the modified answer file
    - name: Display modified answer file
      command: cat /root/answer.txt
      register: answer_file_output

    # Show the answer file output
    - name: Show the answer file output
      debug:
        var: answer_file_output.stdout
- name: Packstack and Apache Configuration with Tmux and Automated Password Input with Logging
  hosts: controller
  become: yes  # Run with elevated privileges
  vars:
    ansible_python_interpreter: /usr/bin/python3    

  vars_prompt:
    - name: "node_password"
      prompt: "Enter the password for the controller and compute nodes"
      private: yes  # This will hide the password input

  tasks:

    # Start a new tmux session, run Packstack with the answer file, and log the output
    - name: Run Packstack with answer file in tmux and log output
      expect:
        command: |
          tmux new-session -d -s packstack_session "packstack --answer-file=/root/answer.txt > /tmp/packstack_install.log 2>&1"
        responses:
          'Password for.*': "{{ node_password }}"
      args:
        creates: /tmp/packstack_install.log  # Task won't re-run if the log file already exists

    # Debug message to manually check tmux session or logs
    - name: Check tmux session or logs manually
      debug:
        msg: "Run 'tmux a -t packstack_session' to check progress or check the log file at /tmp/packstack_install.log."

    # Modify the Apache configuration for Horizon to insert ServerAlias at the end
    - name: Insert ServerAlias 10.142.0.10 in /etc/httpd/conf.d/15-horizon_vhost.conf
      lineinfile:
        path: /etc/httpd/conf.d/15-horizon_vhost.conf
        line: 'ServerAlias 10.142.0.10'
        insertafter: EOF  # Insert at the end of the file
        state: present


    # Restart Apache (httpd) service after modifying the configuration
    - name: Restart Apache httpd service
      systemd:
        name: httpd
        state: restarted

    # Optionally kill the tmux session after Packstack finishes
    - name: Kill tmux session after Packstack completes
      shell: tmux kill-session -t packstack_session
      ignore_errors: yes  # In case the session has already been manually closed

